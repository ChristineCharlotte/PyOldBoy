'''
1.什么是模块？
模块是一系列功能的集合体。分为三大类。

- 内置模块
- 第三方模块
- 自定义模块 （一个Python文件本身就是一个模块，文件名是 m.py，模块名是 m）

模块分为四种形式：
1 使用 python 编写的 .py 文件
2 已被编译为共享库或 DLL 的 C 或 C++ 扩展
3 把一系列模块组织到一起的文件夹（注：文件夹下有一个 __init__.py 文件，该文件夹称为包）
4 使用 C 编写并链接到 python 解释器的内置模块


为何要用模块？

- 内置与第三方的模块：拿来主义，无需定义直接使用，极大提升开发效率。
- 自定义模块：可以将程序的各部分功能提取出来放到一个模块中，为大家使用

好处是减少代码冗余，使得程序组织结构更加清晰。


首次导入模块发生的事：
1. 执行导入文件 foo.py
2. 产生 foo.py 的名称空间，将运行过程中产生的名字都丢到 foo 的名称空间中。
3. 在当前文件中产生一个名字 foo，该名字指向 2 中产生的名称空间

之后的导入，都是直接引用首次导入产生的名称空间，不会重复执行：

'''

import foo

# 2. 引用：模块.变量名

"""
1. 模块名. 名字 是指名道姓地项目，向某一个模块要名字对应的值，不会与当前名称空间发生冲突
"""
x = 1
print(x, foo.x)

"""
2. 无论查看或修改，操作的都是原模块，与调用的位置无关
"""
foo.get()

"""
3. 可以以逗号为分隔符，一行导入多个模块
"""
# 建议
import time
import foo
import m

# 不建议一行导入多个模块
import time, foo, m

"""
4. 导入模块的推荐顺序：python 内置模块 => 第三方模块 => 自定义模块
"""

"""
5.
import ...（包名） as ...（别名）
"""
import foo as f
f.get()


"""
6. 模块是第一类对象
7. 自定义模块的命名应该采用纯小写 + 下划线的风格
8. 可以在函数内导入模块
"""


